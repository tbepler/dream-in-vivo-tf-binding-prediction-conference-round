#!/usr/bin/env python

"""
This scripts takes separate input files:
    - FASTA formatted sequence
    - BigWig tracks
    - Gene expression levels
and outputs a single, combined data file appropriate for downstream use
"""

import sys
import os
import argparse
import pyBigWig
import pandas as pd
import numpy as np

sys.path.append('/'.join(os.path.dirname(os.path.abspath(__file__)).split('/')[:-2]))

def argument_parser():
    parser = argparse.ArgumentParser(description='This script combines genome, DNAse, and gene expression data files into one table suitable for downstream use.')
    parser.add_argument('-d', '--dnase', metavar='FILE', nargs='*', help='DNAse file path')
    parser.add_argument('-o', '--output', metavar='FILE', default=None, help='Destination file (default: stdout)')
    return parser

def main():
    args = argument_parser().parse_args()
    out = '/dev/stdout' if args.output is None else args.output
    store = pd.HDFStore(out, 'w', complevel=9, complib='blosc')
    for path in args.dnase:
        cell_line = os.path.basename(path).split('.')[1]
        print(cell_line, file=sys.stderr)
        bw = pyBigWig.open(path)
        chroms = bw.chroms()
        for chrom in chroms:
            label = '/'.join([cell_line, chrom])
            df = pd.DataFrame({'DNAse':np.array(bw.values(chrom, 0, -1), dtype=np.float32)})
            print('Writing: ', label, file=sys.stderr)
            store.put(label, df, format='table')
            print('Done', file=sys.stderr)
        bw.close()
    store.close()

main()


