#!/usr/bin/env python

"""
This script takes merged label regions, splits, and pads them
to create labeled regions appropriate for training
"""

from __future__ import print_function

import sys
import os
import argparse
import gzip
#import cPickle as pickle
import pickle
import pandas as pd

sys.path.append('/'.join(os.path.dirname(os.path.abspath(__file__)).split('/')[:-2]))

import src.data as data
import src.parser as parse

def argument_parser():
    parser = argparse.ArgumentParser(description='This script merges raw region labels into contiguous regions with concatenated labels for downstream use.')
    parser.add_argument('path', metavar='FILE', help='raw region label file to process')
    parser.add_argument('-n', '--length', type=int, help='length of regions into which to split')
    parser.add_argument('-p', '--padding', type=int, help='amount of padding to add to split regions')
    parser.add_argument('-o', '--output', metavar='FILE', default=None, help='Destination file (default: stdout)')
    return parser

def main():
    args = argument_parser().parse_args()
    n = args.length // 50
    p = args.padding // 50
    with gzip.open(args.path) as f:
        df = pickle.load(f)
        rows = []
        for _, cell_line, chrom, start, end, label, mask in df.itertuples():
            for r_start, r_end, r_label, r_mask in data.split_region(start, end, label, mask, n):
                if p > 0:
                    r_start, r_end, r_label, r_mask = data.pad_region(r_start, r_end, r_label, r_mask, p)
                rows.append([cell_line, chrom, r_start, r_end, r_label, r_mask])
        new_df = pd.DataFrame(rows, columns=df.columns)
        #print(new_df.head(), file=sys.stderr)
    out = sys.stdout.buffer if args.output is None else open(args.output, 'wb')
    pickle.dump(new_df, out, protocol=pickle.HIGHEST_PROTOCOL)


main()









