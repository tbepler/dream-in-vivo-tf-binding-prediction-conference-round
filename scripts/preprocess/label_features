#!/usr/bin/env python

"""
This script takes labeled regions and a list of feature files and combines them
into a file suitable for training.
"""

from __future__ import print_function

import sys
import os
import argparse
import gzip
#import cPickle as pickle
import pickle
import pandas as pd
import numpy as np

sys.path.append('/'.join(os.path.dirname(os.path.abspath(__file__)).split('/')[:-2]))

import src.data as data
import src.parser as parse

def argument_parser():
    parser = argparse.ArgumentParser(description='This script takes labeled regions and a list of feature files and combines them into a file suitable for training.')
    parser.add_argument('-y', '--labels', metavar='FILE', help='labeled regions file')
    parser.add_argument('-x', '--features', dest='features_paths', metavar='FILE', nargs='+', help='files in which to look for features') 
    parser.add_argument('-o', '--output', metavar='FILE', default=None, help='Destination file (default: stdout)')
    return parser

def main():
    args = argument_parser().parse_args()
    with gzip.open(args.labels) as f:
        labels_df = pickle.load(f)
    print('Number of regions:', len(labels_df), file=sys.stderr)
    n_feats = np.max(labels_df['End']-labels_df['Start'])
    n_labels = max(len(label) for label in labels_df['Label'])
    b = len(labels_df)
    #preallocate arrays
    Y = np.zeros((n_labels, b), dtype=np.int8)
    Y_M = np.zeros((n_labels, b), dtype=np.int8)
    X = None
    X_M = np.zeros((n_feats, b), dtype=np.int8)
    i = 0
    for x, x_m, labels_row in parse.load_features(labels_df, args.features_paths):
        if X is None:
            feat_dim = x.shape[1]
            X = np.zeros((n_feats, b, feat_dim), dtype=x.dtype)
            print('X bytes:', X.nbytes, file=sys.stderr)
            print('X_M bytes:', X_M.nbytes, file=sys.stderr)
            print('Y bytes:', Y.nbytes, file=sys.stderr)
            print('Y_M bytes:', Y_M.nbytes, file=sys.stderr)
        y = labels_row['Label']
        Y[:len(y),i] = y
        y_m = labels_row['Mask']
        Y_M[:len(y_m),i] = y_m
        X[:len(x),i] = x
        X_M[:len(x_m),i] = x_m
        i += 1

    out = sys.stdout.buffer if args.output is None else open(args.output, 'wb')
    d = {'X': X, 'X_M': X_M, 'Y': Y, 'Y_M': Y_M}
    pickle.dump(d, out, protocol=pickle.HIGHEST_PROTOCOL)


main()









