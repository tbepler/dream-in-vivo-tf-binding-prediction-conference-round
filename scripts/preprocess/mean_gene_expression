#!/usr/bin/env python

from __future__ import print_function

import sys
import os
import argparse
import gzip
import itertools
import six

root_split = os.path.dirname(os.path.abspath(__file__)).split('/')[:-2]
sys.path.append('/'.join(root_split))
sys.path.append('/'.join(root_split+['rnn']))

import src.data as data
import src.parser as parse

def argument_parser():
    parser = argparse.ArgumentParser(description='This script takes gene expression data and averages the signals together')
    parser.add_argument('files', metavar='FILE', nargs='*', help='Gene expression file paths')
    parser.add_argument('-o', '--output', metavar='FILE', default=None, help='Destination file (default: stdout)')
    return parser

def read_gene_expression(path):
    with open(path) as f:
        for x in parse.read_gene_expression(f):
            yield x

def load_gene_expression(paths):
    expr = [read_gene_expression(path) for path in paths]
    expr = data.combine_gene_expression(itertools.chain(*expr))
    return expr

def main():
    args = argument_parser().parse_args()
    gene_expression = load_gene_expression(args.files)
    gene_expression = list(gene_expression.items())
    gene_expression.sort()

    out = sys.stdout if args.output is None else open(args.output, 'w')
    print('Gene\tTPM', file=out)
    for gene_id, tpm in gene_expression:
        print('{}\t{}'.format(gene_id, tpm), file=out)


main()


