#!/usr/bin/env python

from __future__ import print_function

import sys
import os
import argparse

root_split = os.path.dirname(os.path.abspath(__file__)).split('/')[:-2]
sys.path.append('/'.join(root_split))
sys.path.append('/'.join(root_split+['rnn']))

from src.preprocess.features import nearest_gene_5p_track

chrom_sizes_path = 'data/raw/annotations/hg19.chrom.sizes'
gene_annotations_path = 'data/raw/annotations/gencode.v19.annotation.gff3.gz'

def argument_parser():
    parser = argparse.ArgumentParser(description='This script takes gene expression data and converts it into a signal track where each position contains the expression level of the nearest gene 5\'')
    parser.add_argument('-r', '--rna-seq', dest='rna_seq', metavar='FILE', nargs='*', help='Gene expression file paths')
    parser.add_argument('--chrom-sizes', dest='chrom_sizes', metavar='FILE', default=chrom_sizes_path, help='Chromosome sizes file (default: {})'.format(chrom_sizes_path))
    parser.add_argument('--gene-annot', dest='gene_annot', metavar='FILE', default=gene_annotations_path, help='Gene annotations file (default: {})'.format(gene_annotations_path))
    parser.add_argument('-o', '--output', metavar='FILE', default=None, help='Destination file (default: stdout)')
    return parser

def main():
    args = argument_parser().parse_args()
    out = sys.stdout if args.output is None else open(args.output)
    for chrom, start, end, tpm in nearest_gene_5p_track(args.chrom_sizes, args.gene_annot, args.rna_seq):
        print(chrom, start, end, tpm, file=out)


main()


